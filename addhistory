
# july2023
# run this script as "source addHistory" so history gets added to current shell
# This uses associative arrays in bash. I use separate variables to hold array operations
# such as getting length or keys because these operations appear confusing to a modern coder.

# EXAMPLE .bashrc SNIPPET FOR USING WITH THIS UTILITY:
# alias hhh='source Scripts/addHistory'
# alias h=history
# alias gitpushh='Scripts/gitpushh.sh'
# alias gitpush='git add .; git commit -m "gitpushLaptop"; git push;'
# alias ls='ls -a'

# may need these also sometimes
# cd gitproject
# JAVA_HOME=/home/jdk/jdk-11.0.12-7
# PS1=" > "
# PATH=$PATH:$JAVA_HOME/bin

echo Adds entry to shell history
echo enter aa for favorites
echo enter a for docker-compose lines
echo enter b for LOCAL scripts
echo enter c for aws REMOTE scripts and command-line start/stop/describe
echo enter d for docker image/compose rebuild 
echo enter e for unix find, zip, ssh, etc and some windows commands
echo enter f for git commands
echo enter g for weird git problems and commands to fix maybe

declare -A listing;  # -A makes listing an associative array ie: listing[x], listing[y]
  listing[aa]='
docker-compose -f docker-compose-fullstackWithProfiles.yml exec webA sh
docker-compose -f docker-compose-fullstackWithProfiles.yml logs -f webA 
docker-compose -f docker-compose-fullstackWithProfiles.yml --profile dbOnly --profile allLayersA up -d
(gitpush) && Scripts/RunCmdOnCloud.sh "git pull && Scripts/backEndSpringBootRedo.sh"
(gitpush) && Scripts/RunCmdOnCloud.sh "git pull"
Scripts/RunCmdOnCloud.sh
Scripts/backEndSpringBootRedo.sh
'

  listing[a]='
# docker ps -aq --filter=name=nginx_container
# docker build -t reacttrash_image -f Dockerfile.onestep .
# docker run --name trashcontainera -p 3000:3000 -d reacttrash_image
# docker load < /local/react_basic_image.tar
# docker save react_basic_image > /local/react_basic_image.tar
# docker logs $(sudo docker ps -aq --filter=name=nginx_container)
# docker rm -f $(sudo docker ps -aq) # Remove all containers. The -f option stops the conainer first
Scripts/rebuildContainerImage.sh docker-compose-fullstackWithProfiles.yml ignored img_react_doccompose reactA
./gradlew build; java -Dserver.port=8086 -jar build/libs/spring-boot-0.0.1-SNAPSHOT.jar
docker-compose -f docker-compose-fullstackWithProfiles.yml exec webA sh
echo when adding new library to package.json, must remove images & rebuild:
docker image rm -f image_react_container image_react_node_modules_downloaded
curl -v http://localhost:8086 --output -
docker ps --no-trunc 
docker-compose -f docker-compose-fullstackWithProfiles.yml ps
docker-compose -f docker-compose-fullstackWithProfiles.yml --profile dbOnly up -d
# this shows log of container and -f follows it continuously
docker-compose -f docker-compose-fullstackWithProfiles.yml down
docker-compose -f docker-compose-fullstackWithProfiles.yml logs -f webA 
docker-compose -f docker-compose-fullstackWithProfiles.yml logs -f reactA
# for testing VScode against a backend..
docker-compose -f docker-compose-backend.yml up -d
docker-compose -f docker-compose-fullstackWithProfiles.yml --profile dbOnly --profile allLayersA up -d
Scripts/backEndSpringBootRedo.sh
'


    listing[b]='
Scripts/DatabaseCreateTestUserAndTable.sh
Scripts/backEndRefrshQuick.sh
Scripts/backEndSpringBootRedo.sh
Scripts/frontEndReactBuildProdForNGINX.sh
'


#######################################
	CLOUD_INSTANCE_SECRETSFILE=/remote/cloudInstanceLogin.secret

if ! ( test -f "$CLOUD_INSTANCE_SECRETSFILE" ) 
then
  echo $(tput setaf 2; tput bold) skipping secrets setup no secrets file found $(tput sgr0)
	# echo $(tput setaf 3; tput bold) Ignore if cloud instance. $(tput setaf 2) "$CLOUD_INSTANCE_SECRETSFILE" not found.
	# echo If instance on vmware, the host may not be not sharing /remote folder. 
	# echo See snafu section of docs for fix. $(tput sgr0; tput bold)
	CLOUD_INSTANCE_SECRETSFILE='x' 
	AWSINSTANCE_ID='##AWSINSTANCE_ID_not_set_no_secret_file_exists##'
fi
if ( test -f "$CLOUD_INSTANCE_SECRETSFILE" ); then
	AWSINSTANCE_ID=$(sed -n 's/.*<AWSINSTANCE_ID>\(.*\)<\/AWSINSTANCE_ID>.*/\1/p' $CLOUD_INSTANCE_SECRETSFILE )
fi
#                          ^^ eat everything up until this tag  
#                                    ^^ capture all between tags
#                                                   ^^ output capture
#                    ^^ -n dont print nonmatch lines  ^p=print the match (match 1)
    listing[c]='
echo ****Start/stop cloud instance. These need AWS client+creds installed on pc. Uses IAM mechanism.
aws ec2 start-instances --instance-ids '$AWSINSTANCE_ID' 
aws ec2 stop-instances --instance-ids '$AWSINSTANCE_ID' 
aws ec2 describe-instances --instance-ids '$AWSINSTANCE_ID'
echo "cat /remote/id_rsaXYZ | ssh -i /remote/awsKeyPair2.pem ubuntu@1.2.3.4 \"cat - > ~/.ssh/id_rsaABC\""
echo "cat containerSetups/backend/spboot/bin/main/keystore/fsddkey.p12 | ssh -i /remote/awsKeyPair2.pem ubuntu@1.2.3.4 \"cat - > ~/fsddkey.p12\""
echo remotely run on cloud instance, using cloud login creds on /remote (shared with desktop pc)
Scripts/RunCmdOnCloud.sh "ls Scripts && pwd"
Scripts/RunCmdOnCloud.sh "git pull && docker-compose -f docker-compose-fullstackWithProfiles.yml --profile dbOnly --profile allLayersA up -d"
Scripts/RunCmdOnCloud.sh "docker-compose -f docker-compose-fullstackWithProfiles.yml --profile dbOnly --profile allLayersA up -d"
Scripts/RunCmdOnCloud.sh "docker-compose -f docker-compose-fullstackWithProfiles.yml logs -f webA"
(gitpush) && Scripts/RunCmdOnCloud.sh "git pull && Scripts/backEndSpringBootRedo.sh"
(gitpush) && Scripts/RunCmdOnCloud.sh "git pull"
Scripts/RunCmdOnCloud.sh 
'

#######################################



    listing[d]='
docker images
docker system prune -a # removes all images including downloaded ones
docker ps -aq # -q causes only container id to appear
docker logs $(sudo docker ps -aq --filter=name=nginx_container) # nested statement
docker image rm -f reacttrash_image
Scripts/rebuildContainerImage.sh docker-compose-backend.yml sql-container mysql_dockerfile dbServiceA
Scripts/rebuildContainerImage.sh docker-compose-frontend.yml react_container image_react_container reactA
docker logs $(docker ps -aq --filter=name=react_container)
docker exec -it $(docker ps -aq --filter=name=react_container) sh
docker exec -it $(docker ps -aq --filter=name=webA_container) sh
sudo docker load < /local/react_basic_image.tar
docker ps --no-trunc # --no-trunc shows whole command line
'

# cant find a way to put a ' into below array.....
# bbb=$(ps -ef|grep com.example.springboot.Application| grep -v grep | awk '{print $2 }')
# kill -9 $bbb

    listing[e]='
# ps -ef|grep com.example.springboot.Application| grep -v grep 
# bbb=$(ps -ef|grep com.example.springboot.Application| grep -v grep | awk SINGLEQUOT{print $2 }SINGLEQUOT) 
# kill -9 $bbb  
echo docker run --rm adoptopenjdk/openjdk11:ubi java -version 
echo this stops spring boot and react.js development servers
Scripts/unixStopServerProcesses.sh
eval "$(ssh-agent -s)"
ssh-add -L
ssh-add /remote/id_rsaABC
sudo find . -cmin -30 -type f -exec ls -l {} \;|grep -v .git
find . -name 'Docke*' -exec grep "abcd" {} \; -print
find . -not -path "*/node_modules/*" -type f -name "*.js" -exec grep "isRunn" {} \; -print
find . -path '*mysql*' -prune -o -type f -size -10k -exec grep "ndRefrs" {} \; -print
find . -type f -exec grep "ndRefrs" {} \; -print
find . -type f -size +2M -exec ls -l {} \; -print
find . -not -path "*/node_modules/*" -not -path "*/.git/*" -type f -size +1M -exec ls -l {} \; 
echo ##### this finds node_modules folders which are very big ######
find . -name node_modules -type d -prune -print
echo X is single quote below..  
kill $(ps -ef|grep com.example.springboot.Application| grep -v grep | awk X{print $2 }X )
# -r means recursive,  -x means exclude, these excludes keep empty folder but not contents
zip -r /remote/feb7.zip full-stack-docr -x *.git* */node_modules/**\* */spboot/build/**\* */mySqlWorkDir/**\*
foo=http://$(hostname -I | sed "s/ *$//g"):3000; google-chrome $foo;
echo "tasklist|grep node, taskkill //PID 5632 //F"
arp -a |grep dyna
'
    listing[f]='
echo ###### config persists across logins. Probably adds to .git #####
git config --global user.name "myname"
git config --global user.email "myemail@xyz.com"
echo ###### if local got modified before git pull and git refuses
echo to commit/push. First backup local, then run "git stash" which
echo DELETES LOCAL CHANGES and restores to last git pull.
echo Then see other "git stash" commands to retrieve stashed code.
echo ############################################
git log -p -1  # show commit history
git log -p -1  '\'':!*package-lock.json*'\''  # exclude this wordy file
git branch -v  # shows local branch
git remote -v  # show github repo url
echo git remote set-url origin git@host_rsaXYZ:my_git_id/repoABCD.git
git rm -r --cached .  # when add file to .gitignore but it wont go away
'
listing[g]='
echo ############## you want to load and run a previous commit from yesterday and see differences
echo [ first backup folder with latest code. Its really easy to make really big mistakes in git ]
echo [ click on "view commit details" and copy the commit number (its tiny, right side) ]
echo [ DO NOT FORGET THE TRAILING PERIOD (.) IN FOLLOWING !! ]
echo git checkout 88d4ee5 .
echo [ Now have previous code. run it etc. maybe copy to another folder for comparison ]
echo [ Now you want to go back to the latest code. You can use "main" or the latest commit ID ]
echo git checkout main .
echo [ now back to latest version you hope. ]
echo
echo ############## to fix error saying something about "related histories"
git pull origin main --allow-unrelated-histories
echo # "origin" keyword is shorthand for remote repository project was cloned from
echo # "main" is not a keyword it is branch name. Could also be myBranch123
echo ############## to rename local branch and push to github
git branch -M turkey  # renames local branch
git push --set-upstream origin turkey # -u is shorthand for this
git push origin HEAD:turkey # not sure necessary
git add .; git commit -m "rename branch to turkey"; git push;
echo # now "git push" can be done without the upstream error stuff
echo #############################################
echo #  NOW ON NEW BRANCH. NOW, HOW TO SWITCH TO BACK MAIN AND KEEP NEW BRANCH EDITS  
echo # try edit something on github console, but make sure its on branch june2...
git pull
echo # now you see above edit. To see log of just june2:
git log main..june2
git branch # shows june2
echo # If like new branch and want to make it as master (aka main) branch
echo # in merge command, "ours" ignores all changes from all other branches
git merge --strategy=ours main    
git checkout main
echo # bring new branch edits into main
git merge june2 # change to actual branch
git branch # shows main
echo # now my main is merged, but github main is not. Now push changes to github main
git add .; git commit -m "back to main"; git push; 
echo # this gets everything overriding what git thinks is dirty. 
echo # Use when copying .git folder from new clone into existing
git reset --mixed
git push origin -d master // delete remote branch named "master"
echo git reset HEAD^ --soft # returns to previous commit (caution)
echo ############################################
echo ### HOW TO BRANCH IN GIT AND LATER BRING CHANGES BACK TO MAIN ###
git branch -v
git branch june2
echo branch is now made. Now set my current git to the new branch.
git checkout june2
'
# end of user choices blocks. Now read user input requesting specific block..

read userInputA
\
if [ -z $userInputA  ] # -z tests if empty. If try to == '', get error if empty
then 
  userInputA='none'
fi

ct=0
unset choices; # when run as "source thisScript", must ERASE arrays or else they perist between calls.
declare -A choices;  # this makes listing an associative array ie: listing[x], listing[y]
charCt=97 # letter 'a'
skipd=0

if [ $userInputA != 'none' ] 
then
	# echo $listing|sed 's/\ /\n/g' # substitute \n newline for space
	# lines=$(echo -e $listing|sed 's/\ /\n/g') # substitute \n newline for space
	IFS=$'\n'   #Set the field separator to new line
	# iterate list chosen by user
	# for item in ${listing[$userInputA]}  # use curly bracket for associative array
	chosenListingBlock=${listing[$userInputA]}
	# present user with list of choices of command-line blocks to choose from
	for item in ${chosenListingBlock}
	do
		if [ ${item::1} != '#' ]   # this grabs first character out of string $item
		then 
		    asciiCharCode=$charCt; # echo $asciiCharCode;
		    if [ $asciiCharCode -gt 122 ]
		        then 
		          asciiCharCode=$(($asciiCharCode - 58)) # starts alpabet at uppercase
		          # echo zzz $asciiCharCode
		        fi;
		    charCtAsCharacter=$(printf \\$(printf "%o" $asciiCharCode))  # bizzare but it works. converts int to ascii character
		    choices[$charCtAsCharacter]=$item; # build associative array where char is key and value is command
		    # history -s $item; fi;
		    echo $charCtAsCharacter\) $item;  # show a)date ... b)pwd ... etc
		    ct=$((ct+1));  charCt=$((charCt+1));
		    # prints d as number...     echo yyy $(printf '%d' "'a")
		else
		    skipd=$((skipd+1));
		fi 
	done
	
	# IF USING OR || OR AND && USE DOUBLE BRACKETS!  [[    ]]  
	if [[ $userInputA == 'aa' || $userInputA == 'zzzzzzzzzzplaceholder' ]]; then
        echo Adding all favorites
	    userInputB='yy';
	else
	    echo "enter choice (1 or more) or yy for all, or nothing and hit enter"
	    read userInputB
	fi
    # -z checks if variable exists returns boolean
	if [ -z $userInputB  ]; then userInputB='none'; fi; # make exists so if stmt wont crash
	revOrder=() # setup array to flip lines to reverse order
	ct=0;
	choicesKeys=() # declare 1-d array
	choicesKeys=("${!choices[@]}") # fancy way bash gets array of keys for associative array
	choicesKeysCount=${#choicesKeys[@]} # fancy way bash gets length of simple array
	# echo choices keys[8]: ${choicesKeys[8]}, choices keys count: $choicesKeysCount
	if [ $userInputB == 'yy' ]; then  # add all choices
	    # reverse userInputB order so history in same order as display
	    for letter in ${choicesKeys[*]};  do  # use notation to iterate array
	        revIdx=$(($choicesKeysCount-$ct)); # use (( to cast to number
	        ct=$(($ct+1)); # $(($mynumber+3)) makes it a number
	        revOrder[$revIdx]=$letter;
	        # echo ${revOrder[$revIdx]} yy $letter
	    done;
	    # for iter in "${revOrder[@]}"; do echo aa $iter; done;
		echo adding all 
		# for iter in "${!choices[@]}"  # iterate associate array "choices"; key is a,b,c val is commandline
		for iter in "${revOrder[@]}" 
			do
				# echo key: $iter; # echo val: ${choices[$iter]}
				item=${choices[$iter]}
				if [ ${item::1} != '#' ]  # skip items starting with hash sign (commented out)
				then 
					history -s $item  # add to history
					ct=$((ct+1));
				else
					skipd=$((skipd+1));
				fi 
			done
    fi
	
	if [[ $userInputB != 'none' &&  $userInputB != 'yy' ]]; then 
	  # iterate each character in $userInputB
	  for (( oneCharPtr=0; oneCharPtr<${#userInputB}; oneCharPtr++ )); do
	    item=${userInputB:$oneCharPtr:1}  # get char at position indicated by oneCharPtr
	    #echo adding ${choices[$item]}
	    history -s ${choices[$item]}
	  done
	fi
	# echo $ct items added to history, $skipd skipped\(#\)
else
        echo exiting
fi




