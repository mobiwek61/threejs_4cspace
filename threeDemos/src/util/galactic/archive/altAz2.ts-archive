/**
 * written by Copilot
 * Converts RA/Dec to Altitude and Azimuth for a given observer and time.
 * @param raHours - Right Ascension in hours
 * @param decDegrees - Declination in degrees
 * @param date - Date and time (UTC)
 * @param latitude - Observer's latitude in degrees
 * @param longitude - Observer's longitude in degrees (east positive, west negative)
 * @returns Altitude and Azimuth in degrees
 */
export function getAltAzFromRaDec(
  raHours: number,
  decDegrees: number,
  date: Date,
  latitude: number,
  longitude: number
): { altitude: number; azimuth: number } {
  // Convert RA to degrees
  const raDeg = raHours * 15;
  const decRad = degToRad(decDegrees);
  const latRad = degToRad(latitude);

  // Calculate Local Sidereal Time (LST) in degrees
  const lstHours = getLocalSiderealTime(date, longitude);
  const lstDeg = lstHours * 15;

  // Hour Angle (HA) in degrees
  let haDeg = lstDeg - raDeg;
  if (haDeg < 0) haDeg += 360;
  const haRad = degToRad(haDeg);

  // Altitude calculation
  const sinAlt =
    Math.sin(decRad) * Math.sin(latRad) +
    Math.cos(decRad) * Math.cos(latRad) * Math.cos(haRad);
  const altitude = radToDeg(Math.asin(sinAlt));

  // Azimuth calculation
  const cosAz =
    (Math.sin(decRad) - Math.sin(latRad) * sinAlt) /
    (Math.cos(latRad) * Math.cos(Math.asin(sinAlt)));
  let azimuth = radToDeg(Math.acos(cosAz));

  if (Math.sin(haRad) > 0) {
    azimuth = 360 - azimuth;
  }

  return { altitude, azimuth };
}

function degToRad(deg: number): number {
  return (deg * Math.PI) / 180;
}

function radToDeg(rad: number): number {
  return (rad * 180) / Math.PI;
}

/**
 * Calculates Local Sidereal Time (LST) in hours.
 * @param date - Date and time (UTC)
 * @param longitude - Observer's longitude in degrees (east positive, west negative)
 * @returns LST in hours
 */
function getLocalSiderealTime(date: Date, longitude: number): number {
  const jd = getJulianDate(date);
  const T = (jd - 2451545.0) / 36525;
  let GMST =
    280.46061837 +
    360.98564736629 * (jd - 2451545) +
    0.000387933 * T * T -
    (T * T * T) / 38710000;

  GMST = ((GMST % 360) + 360) % 360; // Normalize to 0–360
  const lst = (GMST + longitude + 360) % 360;
  return lst / 15; // Convert to hours
}

function getJulianDate(date: Date): number {
  const time = date.getTime(); // ms since epoch
  return time / 86400000 + 2440587.5;
}

export function test() {
  const ra = 7.0058;       // 07h 00m 21s
  const dec = 22.7094;     // +22° 42′ 34″
  const now = new Date();
  const lat = 40.6782;     // NYC latitude
  const lon = -73.9442;    // NYC longitude

  const { altitude, azimuth } = getAltAzFromRaDec(ra, dec, now, lat, lon);
  console.log(`zzAltitude: ${altitude.toFixed(2)}°`);
  console.log(`Azimuth:  ${azimuth.toFixed(2)}°`);
}

